SYNC CHALU BUT WAIT NA KARE ON SPLASH!!!

import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

class PokeAPI {
  // Base URL for the Pokemon API
  static const String baseUrl = 'https://pokeapi.co/api/v2/type/';

  // Keys for caching different types of Pokemon data
  static const String grassKey = 'grassData';
  static const String iceKey = 'iceData';
  static const String fireKey = 'fireData';

  // Function to prefetch data for Grass, Ice, and Fire types
  static Future<void> preFetchData() async {
    _fetchDataForType('12'); // Fetch Grass data
    _fetchDataForType('15'); // Fetch Ice data
    _fetchDataForType('10'); // Fetch Fire data
  }

  // Function to fetch Pokemon data for a specific type
  static Future<List<dynamic>> fetchData(String type) async {
    print('fetchData called');
    // Check if data is cached
    List<dynamic> cachedData = await _getCachedData(type);

    if (cachedData.isNotEmpty) {
      // Use cached data if available
      print('Using cached data for type: $type');
      return cachedData;
    } else {
      // Fetch data from the internet if not cached
      print('Fetching data from the internet for type: $type');
      final url = '$baseUrl$type/';
      final uri = Uri.parse(url);
      final response = await http.get(uri);
      final body = response.body;
      final json = jsonDecode(body);

      // Extract Pokemon data and add additional fields
      final List<Map<String, dynamic>> modifiedPokemonList = [];
      for (var entry in json['pokemon']) {
        final pokemonData = entry['pokemon'];
        final pokemonName =
            convertToUppercaseAndReplaceHyphens(pokemonData['name']);
        final pokemonId = extractIdFromPokemonUrl(pokemonData['url']);
        // final pokemonDescription = await _fetchPokemonDescription(pokemonId);

        final modifiedPokemonEntry = {
          'pokemon': {
            'name': pokemonName,
            'url': pokemonData['url'],
            'id': pokemonId,
            'type': int.parse(type),
            // 'description': pokemonDescription,
          },
          'slot': entry['slot'],
        };
        modifiedPokemonList.add(modifiedPokemonEntry);
      }

      // Print the modified Pokemon list here
      print('Modified Pokemon List: $modifiedPokemonList');

      // Cache the fetched data
      await _cacheData(type, modifiedPokemonList);
      print('fetchData completed');
      return modifiedPokemonList;
    }
  }

  // Function to cache Pokemon data
  static Future<void> _cacheData(String type, List<dynamic> data) async {
    final prefs = await SharedPreferences.getInstance();
    final key = _getCacheKey(type);
    prefs.setString(key, jsonEncode(data));
  }

  // Function to get cached Pokemon data
  static Future<List<dynamic>> _getCachedData(String type) async {
    final prefs = await SharedPreferences.getInstance();
    final key = _getCacheKey(type);
    final cachedData = prefs.getString(key);

    if (cachedData != null) {
      return jsonDecode(cachedData);
    } else {
      return [];
    }
  }

  // Function to fetch data for a specific Pokemon type
  static Future<void> _fetchDataForType(String type) async {
    try {
      print('Fetching data for type: $type');
      fetchData(type);
    } catch (error) {
      // Handle errors during data fetching
      print('Error fetching data for type $type: $error');
    }
  }

  // Function to generate cache key based on Pokemon type
  static String _getCacheKey(String type) {
    switch (type) {
      case '12':
        return grassKey;
      case '15':
        return iceKey;
      case '10':
        return fireKey;
      default:
        return '';
    }
  }

  // Function to convert text to uppercase and replace hyphens with spaces
  static String convertToUppercaseAndReplaceHyphens(String text) {
    String upperCaseText = text.toUpperCase();
    String replacedText = upperCaseText.replaceAll('-', ' ');
    return replacedText;
  }

  // Function to extract ID from Pokemon URL
  static String extractIdFromPokemonUrl(String pokemonUrl) {
    // Extract the ID efficiently:
    String pokemonId = pokemonUrl.substring(34, pokemonUrl.length - 1);
    // Generate the complete image URL:
    return pokemonId;
  }

  // Function to get the image URL for a Pokemon
  static String getPicUrlFromPokemon(String pokemonUrl) {
    // Extract the ID efficiently:
    String pokemonId = pokemonUrl.substring(34, pokemonUrl.length - 1);
    // Generate the complete image URL:
    return 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/$pokemonId.png';
  }

  // Function to modify Pokemon description
  static String modifyPokemonDescription(String pokemonDescription) {
    // Replace '\n' and '\f' with spade using character classes
    String modifiedDescription =
        pokemonDescription.replaceAll(RegExp(r'[\n\f]'), '');
    return modifiedDescription;
  }

  static String formatPokemonId(String pokemonId) {
    // Attempt to parse the ID to an integer, handling potential errors
    int parsedId = int.tryParse(pokemonId) ?? 0; // Use null-coalescing operator

    if (parsedId < 10) {
      return '#0' + pokemonId;
    } else {
      return '#' + pokemonId;
    }
  }
}


//iguana

widget.pokemon_description == null
                              ? 'Loading...'
                              : widget.pokemon_description

//iguana

// Print the modifiedPokemonList for debugging
      print('Modified Pokemon List: $modifiedPokemonList');

//iguana

// Function to convert text to uppercase and replace hyphens with spaces
  static String convertToUppercaseAndReplaceHyphens(String text) {
    String upperCaseText = text.toUpperCase();
    String replacedText = upperCaseText.replaceAll('-', ' ');
    return replacedText;
  }

  // Function to extract ID from Pokemon URL
  static String extractIdFromPokemonUrl(String pokemonUrl) {
    // Extract the ID efficiently:
    String pokemonId = pokemonUrl.substring(34, pokemonUrl.length - 1);
    // Generate the complete image URL:
    return pokemonId;
  }

  // Function to get the image URL for a Pokemon
  static String getPicUrlFromPokemon(String pokemonUrl) {
    // Extract the ID efficiently:
    String pokemonId = pokemonUrl.substring(34, pokemonUrl.length - 1);
    // Generate the complete image URL:
    return 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/$pokemonId.png';
  }

  // Function to modify Pokemon description
  static String modifyPokemonDescription(String pokemonDescription) {
    // Replace '\n' and '\f' with an empty string
    String modifiedDescription =
        pokemonDescription.replaceAll(RegExp(r'\n|\f'), '');
    return modifiedDescription;
  }

//iguana

Do you understand that I have this text (say k) 'A strange seed was planted on its back at birth. The plant sprouts and grows with this POKÃ©MON.' in my box.dart? I also have widget.pokemon_name there, similar to it I want this text k to be called from the API.

My usual API call goes to https://pokeapi.co/api/v2/type/ and after that 10 or 12 or 15 comes (for examples in case of 12 - https://pokeapi.co/api/v2/type/12) to make API calls for different types of pokemon. When do I so I parse ['pokemon'] in my json as a list called something like pokemonList (or maybe something else, just check the code) and then get pokemon_name from [index]['pokemon']['name'] of the list. Similarly I get pokemon_id from from [index]['pokemon']['url'] of that same list.

Then I use this pokemon_id in some other url to get an image of the pokemon I display. But now for each pokemon I have to get the text k. Here is the method - Suppose id of pokemon is '7', then go to https://pokeapi.co/api/v2/pokemon-species/7 (or go to 'https://pokeapi.co/api/v2/pokemon-species/378' when the id is '378') then from there parse ['flavor_text_entries'] into a list called something like pokemonDescription (but prefer something similar to what I did in code earlier when parsed ['pokemon'] from another url). Then I will go to [index]['flavor_text'] of this list, there will be multiple entries, just pick the first one and use it as pokemon_description and I will use it as widget.pokemon_description in place of where currently text k is.

But remember just as how pokemon_name is linked to pokemon_id (also check in code if they are linked in they I want it to be), such as that we can get any pokemon_name corresponding to a pokemon_id present - we also want pokemon_description to be linked to its corresponding pokemon_id, so when I implement search functionality and search for a particular name of pokemon inside my list of pokemon_name, then I can get its pokemon_id from which I can get its pokemon_description to show (but we will not implement search part as of now).

Have you understand the complete goal? If yes then answer so.

Now I will give you current pokeapi.dart, box.dart and content.dart to implement the above thing.

//popat code

Answer all of my questions I had asked and then start working -

1 - In pokeapi.dart - Include the new parsing inside the same function in which parsing for pokemon_name was done, so that the new one also gets cached, to make things simple change the names of variables to something very descriptive.

2 - Just how there is 'final String pokemon_name;' inside box.dart, make one for pokemon_description as well and use it in place of text k.

3 - In content.dart - Update PokemonContentList widget to use the modified CustomPaperBox with the new description field. See like how pokemon_name is used -

pokemon_name: PokeAPI.convertToUppercaseAndReplaceHyphens(
                  pokemonList[index]['pokemon']['name'],
                ),

Similarly use pokemon_description which is from pokemonDescription[index]['flavor_text'] and do you remember how we talked about taking the first entry from the multiple entries inside ['flavor_text']

4 - All The Best
